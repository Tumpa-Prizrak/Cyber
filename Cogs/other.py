import nextcord
from nextcord.ext import commands
from nextcord.utils import _IS_ASCII
from Cogs.helper import *

class OtherCommand(commands.Cog):
    def __init__(self, client):
        self.client = client
        self.runame = '–û—Å—Ç–∞–ª—å–Ω–æ–µ'
        self.invisible = False

    @commands.command()
    async def help(self, ctx, *, cmd_input = None):
        if cmd_input is None:
            emb = nextcord.Embed(title="–ö–æ–º–∞–Ω–¥—ã:", colour=nextcord.colour.Colour.green())
            emb.set_footer(text=f"–ú–æ–∂–µ—à—å –ø—Ä–æ–ø–∏—Å–∞—Ç—å {ctx.prefix}help <–∫–æ–º–∞–Ω–¥–∞>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É :)",
                                        icon_url="https://cdn.discordapp.com/attachments/880063679570259969/897478783215476826/0c5aa927105c867558d290d6a1f3f72f.webp")
            for cog in self.client.cogs.values():
                if not getattr(cog, 'invisible'):
                    emb.add_field(name=f'**{cog.runame}:**', value=" ".join(f'`{i.name}`' for i in cog.get_commands()),
                                  inline=False)
        else:
            for cmd in self.client.commands:
                if cmd.name == cmd_input:
                    # –≤ –±—É–¥—É—â–µ–º —è —Å–¥–µ–ª–∞—é —Ç–∞–∫, —á—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç cmd.usage, —Ç–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –ø–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                    emb = nextcord.Embed(title=f"–ö–æ–º–∞–Ω–¥–∞ {cmd.name}", description=f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å: {ctx.prefix}{cmd.usage if cmd.usage else cmd.name}', colour=nextcord.colour.Colour.green())
                    emb.add_field(name=cmd.brief if cmd.brief else '<–Ω–µ—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è>', value=cmd.description if cmd.description else '** **')
                    break
        await ctx.send(embed=emb)   

    @commands.command(usage = 'ping', brief = '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞')
    async def ping(self, ctx):
        await ctx.send(f"–ü–æ–Ω–≥! –ó–∞–¥–µ—Ä–∂–∫–∞ {round(self.client.latency * 1000)} –º—Å")

    @commands.command(usage = 'profile', brief = '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å')
    async def profile(self, ctx: commands.Context, person: nextcord.Member = None):
        if person == None:
            person = ctx.author
        emb = nextcord.Embed(title="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å" if person == None else f"–ü—Ä–æ—Ñ–∏–ª—å {person.display_name}", color=person.top_role.colour)
        emb.set_author(name=str(person))
        emb.set_thumbnail(url=person.avatar)
        emb.add_field(name=f"–°—Ç–∞—Ç—É—Å", value=str(person.status), inline=False)
        # emb.add_field(name=f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å", value=str(person.custom_status), inline=False)
        emb.add_field(name=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", value=str(person.activity), inline=False)
        emb.add_field(name=f"ID", value=str(person.id), inline=False)
        emb.add_field(name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                      value=f"<t:{round(person.created_at.timestamp())}:R>",
                      inline=False)
        emb.add_field(name="–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è",
                      value=f"<t:{round(person.joined_at.timestamp())}:R>",
                      inline=False)
        emb.add_field(name="–í—ã—Å—à–∞—è —Ä–æ–ª—å", value=person.top_role, inline=False)
        await ctx.send(embed=emb)
    
    """@commands.command(usage = 'vote <–¢–µ–∫—Å—Ç> <–í–∞—Ä–∏–∞–Ω—Ç1> [–í–∞—Ä–∏–∞–Ω—Ç2] ... [–í–∞—Ä–∏–∞–Ω—Ç20]', brief = '–ù–∞—á–∏–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
    async def vote(self, ctx: commands.Context, text, *, variants):
        if len(variants) > 20:
            return embed_builder("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", desc="–ú–∞–∫–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: 20", color=nextcord.Colour.red())
        emojis = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', 'üü§', 'üî∂', "üî∑"]
        conter = dict()
        voited = [ctx.author.id]
        for i in emojis[:len(variants) + 1]:
            conter.update({str(i): 0})
        
        desc = ""
        desc += "*–¢–µ–º–∞*" + "\n" + text + "\n"
        desc += "*–í–∞—Ä–∏–∞–Ω—Ç—ã*\n"
        
        a = 0
        for i in conter.keys():
            desc += f"{i}|{variants[a]}" + "\n"
            a += 1
        del a

        def if_already(_, user):
            return not user in voited
        
        updated_text = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å ({len(voited)} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö)\n"
        for i in conter.keys():
            updated_text += f"{i}|[{conter[i]}]\n"
        
        updated_text += f"{ctx.author.mention}: —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É"
        emb = embed_builder("üó≥Ô∏è –û–ø—Ä–æ—Å–Ω–∏–∫", desc=desc + updated_text)
        mess = await ctx.send(embed=emb)

        while True:
            del emb, updated_text
            emoj, pers = self.client.wait_for('reaction_add', check=if_already)
            voited.append(pers.id)
            conter[str(emoj.emoji)] += 1
            updated_text = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å ({len(voited)} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö)\n"
            for i in conter.keys():
                updated_text += f"{i}|[{conter[i]}]\n"
        
            updated_text += f"{ctx.author.mention}: —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É"
            emb = embed_builder("üó≥Ô∏è –û–ø—Ä–æ—Å–Ω–∏–∫", desc=desc + updated_text)
            await mess.edit(embed=emb)"""

def setup(client):
    client.add_cog(OtherCommand(client))
