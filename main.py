import discord
from discord import colour
from discord.ext import commands
import sqlite3
import config as c
import json
import requests
from random import randint, randrange
import datetime

bot = commands.Bot(command_prefix=c.BotToken, intents=discord.Intents.all(), case_insensitive=True)
bot.remove_command("help")
# slash = InteractionClient(bot)
conn = sqlite3.connect("mydb.db")
curor = conn.cursor()
helpCommands = {}
namesHelpCommands = []


class UserCommand:
    def __init__(self, name, desc) -> None:
        self.name = name
        self.desc = desc
    
    def __str__(self) -> str:
        return self.name


def CommandToHelp(func, desc, categ):
    try:
        helpCommands[categ]
    except KeyError:
        helpCommands.update({categ: []})
    finally:
        userFunc = UserCommand(func.name.lower(), desc)
        namesHelpCommands.append(userFunc.name + "-" + categ)
        helpCommands[categ].append(userFunc)
        swapped = True
        while swapped:
            swapped = False
            for i in range(len(helpCommands[categ]) - 1):
                if helpCommands[categ][i].name > helpCommands[categ][i + 1].name:
                    helpCommands[categ][i], helpCommands[categ][i + 1] = helpCommands[categ][i + 1], helpCommands[categ][i]
                    swapped = True


@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.dnd, activity=discord.Streaming(name="!help",
        platform="Twitch", details=f"{c.BotToken}help", game="Create bot", url="https://www.twitch.tv/andrew_k9"))
    print("Ready")


@bot.command()
async def ping(ctx):
    await ctx.send("pong")
CommandToHelp(ping, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç pong", "–î—Ä—É–≥–æ–µ:")


@bot.command()
async def zooy(ctx):
    emb = discord.Embed(title="–ú–∞–≥–∞–∑–∏–Ω\n:cat2: - –º–∞–≥–∞–∑–∏–Ω –ø–µ—Ç–∏–∫–æ–≤", colour=discord.colour.Colour.green())
    msg = await ctx.send(embed=emb)
    await msg.add_reaction("üêà")

    def check(reaction, user):
        if user == ctx.author:
            return True
        else:
            return False

    reaction, user = await bot.wait_for('reaction_add', check=check)

    if str(reaction) == "üêà":
        await msg.clear_reactions()
        emb = discord.Embed(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n:cat2: - –ö–æ—Ç",
                            colour=discord.colour.Colour.orange())
        await msg.edit(embed=emb)
        await msg.add_reaction("üêà")

        def pet(reaction, user):
            if user == ctx.author:
                return True
            else:
                return False

        reaction, user = await bot.wait_for('reaction_add', check=pet)

        await ctx.send("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ç–∞")

        def waitname(m):
            return m.author == ctx.author

        msg = await bot.wait_for('message', check=waitname)

        name = msg.content

        curor.execute(f"INSERT INTO pets VALUES ('–∫–æ—Ç', '{name}', '{str(ctx.author.id)}')")
        conn.commit()

        await ctx.send(f"–í—ã –∫—É–ø–∏–ª–∏ {reaction} —Å –∏–º–µ–Ω–µ–º \"{name}\"")
CommandToHelp(zooy, "–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω", "–ü–µ—Ç—ã:")


@bot.command()
async def pets(ctx):
    out = []
    sql = f"SELECT * FROM pets WHERE Discor=? ORDER BY name"
    for i in curor.execute(sql, [(str(ctx.author.id))]):
        out.append(i)
    if len(out) > 0:
        emb = discord.Embed(title="–¢–≤–æ–∏ –ø–µ—Ç—ã", colour=discord.colour.Colour.dark_orange())
        for i in out:
            emb.add_field(name=f"–¢–≤–æ–π {i[0]}", value=f"–ò–º—è: {i[1]}")
    else:
        emb = discord.Embed(title="–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ç–æ–≤", colour=discord.colour.Colour.dark_red())
    await ctx.send(embed=emb)
CommandToHelp(pets, "–°–ø–∏—Å–æ–∫ –ø–µ—Ç–æ–≤", "–ü–µ—Ç—ã:")


@bot.command()
async def profile(ctx):
    bal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))
    cookies = list(curor.execute("SELECT * FROM cookies WHERE name=?", [(str(ctx.author.id))]))
    emb = discord.Embed(title=f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", color=discord.colour.Colour.dark_orange())
    joined_at = ctx.author.joined_at
    created_at = ctx.author.created_at
    roles = ""
    for i in ctx.author.roles:
        if str(i.name) != "@everyone":
            roles += f'"{i.name}"; '
    if len(bal) == 0:
        curor.execute(f"INSERT INTO balance VALUES ('{str(ctx.author.id)}', 0, null, null, null, null)")
        conn.commit()
        bal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))
    try:
        emb.set_author(name=str(ctx.author.id) + f" | üç™: {cookies[0][1]}")
    except IndexError:
        emb.set_author(name=str(ctx.author))
    emb.set_thumbnail(url=ctx.author.avatar_url)
    emb.add_field(name=f"–°—Ç–∞—Ç—É—Å", value=str(ctx.author.status), inline=False)
    emb.add_field(name=f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å", value=str(ctx.author.activity), inline=False)
    emb.add_field(name=f"–í–∞–ª—é—Ç–∞", value=str(bal[0][1]), inline=False)
    emb.add_field(name=f"ID", value=str(ctx.author.id), inline=False)
    emb.add_field(name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                  value=f"{created_at.day}.{created_at.month}.{created_at.year} {created_at.hour}:{created_at.minute}",
                  inline=False)
    emb.add_field(name="–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è",
                  value=f"{joined_at.day}.{joined_at.month}.{joined_at.year} {joined_at.hour}:{joined_at.minute}",
                  inline=False)
    emb.add_field(name="–û —Å–µ–±–µ", value=bal[0][2] if bal[0][2] != None else "*–ù–∏—á—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ*", inline=False)
    emb.add_field(name="–†–æ–ª–∏", value=roles, inline=False)
    await ctx.send(embed=emb)
CommandToHelp(profile, "–ü—Ä–æ—Ñ–∏–ª—å", "–î—Ä—É–≥–æ–µ:")


@bot.command()
async def info(ctx, type_of_info, *, value):
    try:
        if type_of_info in ['name', 'balance']:
            raise TypeError(f"no such column: {type_of_info}")
        curor.execute(f"UPDATE profile SET {type_of_info}='{value}' WHERE name = '{str(ctx.author.id)}'")
        conn.commit()
        emb = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", colour=discord.colour.Colour.green())
        await ctx.send(embed=emb)
    except Exception as e:
        emb = discord.Embed(title="–ü—Ä–æ–∏–æ—à–ª–∞ –æ—à–∏–±–∫–∞", colour=discord.colour.Colour.red())
        emb.add_field(name="–û—à–∏–±–∫–∞", value=str(e))
        await ctx.send(embed=emb)
CommandToHelp(info, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å", "–î—Ä—É–≥–æ–µ:")


@bot.command()
async def poke(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime poke&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —Ç—ã–∫–Ω—É–ª –≤ {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(poke, "–¢—ã–∫–Ω—É—Ç—å –≤ <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def baka(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime baka&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —Ä—É–≥–∞–µ—Ç {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(baka, "–†—É–≥–∞—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def tickle(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime tickle&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —â–µ–∫–æ—á–µ—Ç {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(tickle, "–©–µ–∫–æ—Ç–∞—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def cuddle(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime cuddlele&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø—Ä–∏–∂–∞–ª—Å—è –∫ {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(cuddle, "–ü—Ä–∏–∂–∞—Ç—å—Å—è –∫ <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def kiss(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime kiss&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(kiss, "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def spank(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime spank&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —É–¥–∞—Ä–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)


@bot.command()
async def hug(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime hug&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –æ–±–Ω—è–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(hug, "–û–±–Ω—è—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def slap(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime slap&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –¥–∞–ª –ø–æ—â—ë—á–∏–Ω—É {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(slap, "–¥–∞—Ç—å –ø–æ—â—ë—á–∏–Ω—É <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def pat(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime pat&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø–æ–≥–ª–∞–¥–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(pat, "–ü–æ–≥–ª–∞–¥–∏—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def lick(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime lick&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ª–∏–∑–Ω—É–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(lick, "–õ–∏–∑–Ω—É—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def five(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime high five&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –¥–∞–ª –ø—è—Ç—å {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(five, "–î–∞—Ç—å –ø—è—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def bite(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime bite&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —É–∫—É—Å–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(bite, "–£–∫—É—Å–∏—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def kill(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime kill&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —É–±–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(kill, "–£–±–∏—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def feed(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime feed&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø–æ–∫–æ—Ä–º–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    now = list(curor.execute("SELECT * FROM cookies WHERE name=?", [(str(person))]))
    if len(now) == 0:
        curor.execute(f"INSERT INTO cookies VALUES ('{str(person.id)}', 0)")
        conn.commit()
    curor.execute(f"UPDATE cookies SET col={now[0][1] + 1} WHERE name = '{str(person)}'")
    conn.commit()

    await ctx.send(embed=emb)
CommandToHelp(feed, "–ü–æ–∫–æ—Ä–º–∏—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def scare(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime scare&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –Ω–∞–ø—É–≥–∞–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(scare, "–ù–∞–ø—É–≥–∞—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def hit(ctx, person: discord.Member):
    if ctx.author == person:
        return

    r = requests.get(f"https://g.tenor.com/v1/search?q=anime hit&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —É–¥–∞—Ä–∏–ª {person.name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(hit, "–£–¥–∞—Ä–∏—Ç—å <user>", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def bangHead(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime bang head&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –±—å—ë—Ç—Å—è –≥–æ–ª–æ–≤–æ–π –æ —Å—Ç–µ–Ω—É",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(bangHead, "–ë–∏—Ç—å—Å—è –≥–æ–ª–æ–≤–æ–π –æ–± —Å—Ç–µ–Ω—É", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def innocent(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime innocent&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(innocent, "–û–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def cry(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime cry&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø–ª–∞—á–µ—Ç",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(cry, "–ü–ª–∞–∫–∞—Ç—å", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def blush(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime blush&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –∫—Ä–∞—Å–Ω–µ–µ—Ç",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(blush, "–ö—Ä–∞—Å–Ω–µ—Ç—å", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def sleep(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime sleep&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —Å–ø–∏—Ç",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(sleep, "–°–ø–∞—Ç—å", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def dance(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime dance&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} —Ç–∞–Ω—Ü—É–µ—Ç",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(dance, "–¢–∞–Ω—Ü–µ–≤–∞—Ç—å", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def flip(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime table flip&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç —Å—Ç–æ–ª",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(flip, "–û–ø—Ä–æ–∫–∏–Ω—É—Ç—å —Å—Ç–æ–ª", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def suicide(ctx):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime suicide&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –æ—Ç–∫–∏–Ω—É–ª—Å—è",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(suicide, "–£–±–∏—Ç—å —Å–µ–±—è(–æ—Å—É–∂–¥–∞—é)", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def coffee(ctx, person: discord.Member = None):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime drink coffee&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø—å—ë—Ç –∫–æ—Ñ–µ" if person == None else f"{ctx.author.name} –ø—å—ë—Ç –∫–æ—Ñ–µ —Å {person.display_name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(coffee, "–ü–∏—Ç—å –∫–æ—Ñ–µ [user]", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def tea(ctx, person: discord.Member = None):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime drink tea&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –ø—å—ë—Ç —á–∞–π" if person == None else f"{ctx.author.name} –ø—å—ë—Ç —á–∞–π —Å {person.display_name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(tea, "–ü–∏—Ç—å —á–∞–π [user]", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def alcohol(ctx, person: discord.Member = None):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime drink alcohol&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –±—É—Ö–∞–µ—Ç" if person == None else f"{ctx.author.name} –±—É—Ö–∞–µ—Ç —Å {person.display_name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(alcohol, "–ë—É—Ö–∞—Ç—å [user]", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def walk(ctx, person: discord.Member = None):
    r = requests.get(f"https://g.tenor.com/v1/search?q=anime walk&key={c.apikey}&limit={str(c.limit)}")

    if r:
        emb = discord.Embed(title=f"{ctx.author.name} –≥—É–ª—è–µ—Ç" if person == None else f"{ctx.author.name} –≥—É–ª—è–µ—Ç —Å {person.display_name}",
                            colour=discord.colour.Colour.green())
        while True:
            try:
                emb.set_image(url=json.loads(r.content)["results"][randint(0, c.limit)]["media"][0]['gif']['url'])
                break
            except IndexError:
                continue
    else:
        emb = discord.Embed(title=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {r.status_code}",
                            colour=discord.colour.Colour.red())

    await ctx.send(embed=emb)
CommandToHelp(walk, "–ì—É–ª—è—Ç—å [user]", "–†–µ–∞–∫—Ü–∏–∏:")


@bot.command()
async def work(ctx):
    try:
        lastWork = datetime.datetime.strptime(list(curor.execute("SELECT lastWork FROM balance WHERE name=?", [529302484901036043]))[0][0], '%Y-%m-%d %H:%M:%S.%f')
    except TypeError:
        lastWork = None
    if lastWork == None or lastWork + datetime.timedelta(minutes=30) < datetime.datetime.now():
        try:
            nowBal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))[0][1]
        except IndexError:
            nowBal = 0
            curor.execute(f"INSERT INTO balance VALUES ('{str(ctx.author.id)}', 0, null, null, null, null)")
        addBal = randrange(10, 1001, 10)
        curor.execute(f"UPDATE balance SET bal={nowBal + addBal} WHERE name = '{str(ctx.author.id)}'")
        curor.execute(f"UPDATE balance SET lastWork=? WHERE name=?", [datetime.datetime.now(), str(ctx.author.id)])
        conn.commit()
        emb = discord.Embed(title="–†–∞–±–æ—Ç–∞", colour=discord.colour.Colour.green())
        emb.add_field(name="–¢—ã –ø–æ–ª—É—á–∏–ª(–∞)", value=str(addBal) + "$", inline=False)
        emb.add_field(name="–£ —Ç–µ–±—è", value=str(nowBal + addBal) + "$", inline=False)
        await ctx.send(embed=emb)
    else:
        normal_datetime = lastWork.strftime("%A %H:%M")
        normal_next_datetime = lastWork + datetime.timedelta(minutes=30)
        emb = discord.Embed(title="–û—à–∏–±–∫–∞", colour=colour.Color.red())
        emb.add_field(name=f"–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 30 –º–∏–Ω—É—Ç —Å {normal_datetime}", value=f'–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ {normal_next_datetime.strftime("%A %H:%M")}')
        await ctx.send(embed=emb)
CommandToHelp(work, "–†–∞–±–æ—Ç–∞—Ç—å", "–≠–∫–æ–Ω–æ–º–∏–∫–∞:")


@bot.command()
async def daily(ctx):
    try:
        lastDaily = datetime.datetime.strptime(list(curor.execute("SELECT lastDaily FROM balance WHERE name=?", [529302484901036043]))[0][0], '%Y-%m-%d %H:%M:%S.%f')
    except TypeError:
        lastDaily = None
    if lastDaily == None or lastDaily + datetime.timedelta(days=1) < datetime.datetime.now():
        try:
            nowBal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))[0][1]
        except IndexError:
            nowBal = 0
            curor.execute(f"INSERT INTO balance VALUES ('{str(ctx.author.id)}', 0, null, null, null, null)")
        addBal = 500
        curor.execute(f"UPDATE balance SET bal={nowBal + addBal} WHERE name = '{str(ctx.author.id)}'")
        curor.execute(f"UPDATE balance SET lastDaily=? WHERE name=?", [datetime.datetime.now(), str(ctx.author.id)])
        conn.commit()
        emb = discord.Embed(title="–î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥", colour=discord.colour.Colour.green())
        emb.add_field(name="–¢—ã –ø–æ–ª—É—á–∏–ª(–∞)", value=str(addBal) + "$", inline=False)
        emb.add_field(name="–£ —Ç–µ–±—è", value=str(nowBal + addBal) + "$", inline=False)
        await ctx.send(embed=emb)
    else:
        normal_datetime = lastDaily.strftime("%A %H:%M")
        normal_next_datetime = lastDaily + datetime.timedelta(days=1)
        emb = discord.Embed(title="–û—à–∏–±–∫–∞", colour=colour.Color.red())
        emb.add_field(name=f"–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 1 –¥–µ–Ω—å —Å {normal_datetime}", value=f'–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ {normal_next_datetime.strftime("%A %H:%M")}')
        await ctx.send(embed=emb)
CommandToHelp(daily, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "–≠–∫–æ–Ω–æ–º–∏–∫–∞:")


@bot.command()
async def weekly(ctx):
    try:
        lastDaily = datetime.datetime.strptime(list(curor.execute("SELECT lastWeekly FROM balance WHERE name=?", [529302484901036043]))[0][0], '%Y-%m-%d %H:%M:%S.%f')
    except TypeError:
        lastDaily = None
    if lastDaily == None or lastDaily + datetime.timedelta(days=7) < datetime.datetime.now():
        try:
            nowBal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))[0][1]
        except IndexError:
            nowBal = 0
            curor.execute(f"INSERT INTO balance VALUES ('{str(ctx.author.id)}', 0, null, null, null, null)")
        addBal = 3000
        curor.execute(f"UPDATE balance SET bal={nowBal + addBal} WHERE name = '{str(ctx.author.id)}'")
        curor.execute(f"UPDATE balance SET lastWeekly=? WHERE name=?", [datetime.datetime.now(), str(ctx.author.id)])
        conn.commit()
        emb = discord.Embed(title="–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", colour=discord.colour.Colour.green())
        emb.add_field(name="–¢—ã –ø–æ–ª—É—á–∏–ª(–∞)", value=str(addBal) + "$", inline=False)
        emb.add_field(name="–£ —Ç–µ–±—è", value=str(nowBal + addBal) + "$", inline=False)
        await ctx.send(embed=emb)
    else:
        normal_datetime = lastDaily.strftime("%A %H:%M")
        normal_next_datetime = lastDaily + datetime.timedelta(days=7)
        emb = discord.Embed(title="–û—à–∏–±–∫–∞", colour=colour.Color.red())
        emb.add_field(name=f"–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 1 –Ω–µ–¥–µ–ª—è —Å {normal_datetime}", value=f'–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ {normal_next_datetime.strftime("%A %H:%M")}')
        await ctx.send(embed=emb)
CommandToHelp(weekly, "–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", "–≠–∫–æ–Ω–æ–º–∏–∫–∞:")


@bot.command()
async def crime(ctx):
    try:
        lastDaily = datetime.datetime.strptime(list(curor.execute("SELECT lastCrime FROM balance WHERE name=?", [529302484901036043]))[0][0], '%Y-%m-%d %H:%M:%S.%f')
    except TypeError:
        lastDaily = None
    if lastDaily == None or lastDaily + datetime.timedelta(hours=1) < datetime.datetime.now():
        try:
            nowBal = list(curor.execute("SELECT * FROM balance WHERE name=?", [(str(ctx.author.id))]))[0][1]
        except IndexError:
            nowBal = 0
            curor.execute(f"INSERT INTO balance VALUES ('{str(ctx.author.id)}', 0, null, null, null, null)")
        addBal = randrange(1000, 10001, 100)
        if randint(0, 1) != 0:
            curor.execute(f"UPDATE balance SET bal={nowBal + addBal} WHERE name = '{str(ctx.author.id)}'")
            emb = discord.Embed(title="–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", colour=discord.colour.Colour.green())
            emb.add_field(name="–¢—ã –ø–æ–ª—É—á–∏–ª(–∞)", value=str(addBal) + "$", inline=False)
            emb.add_field(name="–£ —Ç–µ–±—è", value=str(nowBal + addBal) + "$", inline=False)
            await ctx.send(embed=emb)
        else:
            curor.execute(f"UPDATE balance SET bal={nowBal - nowBal // randint(2, 10)} WHERE name = '{str(ctx.author.id)}'")
            emb = discord.Embed(title="–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", colour=discord.colour.Colour.red())
            emb.add_field(name="–£ —Ç–µ–±—è –∑–∞–±—Ä–∞–ª–∏", value=str(addBal) + "$", inline=False)
            emb.add_field(name="–£ —Ç–µ–±—è", value=str(nowBal + addBal) + "$", inline=False)
            await ctx.send(embed=emb)
        curor.execute(f"UPDATE balance SET lastCrime=? WHERE name=?", [datetime.datetime.now(), str(ctx.author.id)])
        conn.commit()
    else:
        normal_datetime = lastDaily.strftime("%A %H:%M")
        normal_next_datetime = lastDaily + datetime.timedelta(hours=1)
        emb = discord.Embed(title="–û—à–∏–±–∫–∞", colour=colour.Color.red())
        emb.add_field(name=f"–ï—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 1 —á–∞—Å —Å {normal_datetime}", value=f'–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ {normal_next_datetime.strftime("%A %H:%M")}')
        await ctx.send(embed=emb)
CommandToHelp(crime, "–°–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–≠–∫–æ–Ω–æ–º–∏–∫–∞:")


@bot.command()
async def help(ctx, comm: str = None):
    if comm == None:
        emb = discord.Embed(title="–ö–æ–º–∞–Ω–¥—ã: ", colour=discord.colour.Colour.green())
        categories = helpCommands.keys()
        for category in categories:
            try:
                category_commands = ""
                for i in [i.name for i in helpCommands[category]][:-1]:
                    category_commands += i + ", "
                category_commands += [i.name for i in helpCommands[category]][0]
                emb.add_field(name=f"{category}", value=f"{category_commands}", inline=False)
            except Exception as e:
                emb.add_field(name=f"{category}", value=f"Error: {e}", inline=False)
    else:
        if comm in [str.split(i, "-")[0] for i in namesHelpCommands]:
            Thiscommand = namesHelpCommands[[str.split(i, "-")[0] for i in namesHelpCommands].index(comm)]
            Thiscommand = helpCommands[str.split(Thiscommand, "-")[1]]
            for i in Thiscommand:
                if i.name == comm:
                    Thiscommand = i
            emb = discord.Embed(title=f"–ö–æ–º–∞–Ω–¥–∞ {comm}", colour=discord.colour.Colour.green())
            emb.add_field(name=Thiscommand.name, value=Thiscommand.desc)
        else:
            emb = discord.Embed(title="–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", colour=discord.colour.Colour.red())
    await ctx.send(embed=emb)
CommandToHelp(help, "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", "–î—Ä—É–≥–æ–µ:")


@bot.command()
async def code(ctx, *, code: str):
    if ctx.author.id not in c.owners:
        return

    in_code = ""

    for i in str.split(code, "\n"):
        if i.startswith("```"):
            continue
        else:
            in_code += i
            in_code += "\n"
    
    try:
        exec(in_code)
    except Exception as e:
        await ctx.send(e)


@bot.command()
@commands.has_permissions(kick_members=True)
async def kick(ctx, man: discord.Member, *, reason: str = ""):
    await man.kick(reason=reason)
    emb = discord.Embed(title=f"\"{man.display_name}\" –ë—ã–ª –∫–∏–∫–Ω—É—Ç", colour=discord.colour.Color.green())
    await ctx.send(embed=emb)
CommandToHelp(kick, "–ö–∏–∫–Ω—É—Ç—å [user]", "–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:")


@bot.command()
@commands.has_permissions(kick_members=True)
async def ban(ctx, man: discord.Member, *, reason: str = ""):
    await man.ban(reason=reason)
    emb = discord.Embed(title=f"\"{man.display_name}\" –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω", colour=discord.colour.Color.green())
    await ctx.send(embed=emb)
CommandToHelp(ban, "–ó–∞–±–∞–Ω–∏—Ç—å [user]", "–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:")


bot.run(c.tocen)
